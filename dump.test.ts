import { assertEquals } from "@std/assert";
import type { RObject } from "./rom.ts";
import { dump } from "./dump.ts";

function d(obj: RObject): number[] {
  return Array.from(dump(obj));
}

Deno.test("dump dumps nil", () => {
  assertEquals(d(null), [0x04, 0x08, 0x30]);
});

Deno.test("dump dumps Fixnum", () => {
  // Zero
  assertEquals(d(0n), [0x04, 0x08, 0x69, 0x00]);
  // Positive short form
  assertEquals(d(1n), [0x04, 0x08, 0x69, 0x06]);
  assertEquals(d(122n), [0x04, 0x08, 0x69, 0x7F]);
  // Negative short form
  assertEquals(d(-1n), [0x04, 0x08, 0x69, 0xFA]);
  assertEquals(d(-123n), [0x04, 0x08, 0x69, 0x80]);
  // Positive 1-byte form
  assertEquals(d(123n), [0x04, 0x08, 0x69, 0x01, 0x7B]);
  assertEquals(d(255n), [0x04, 0x08, 0x69, 0x01, 0xFF]);
  // Positive 2-byte form
  assertEquals(d(256n), [0x04, 0x08, 0x69, 0x02, 0x00, 0x01]);
  assertEquals(d(0xFFFFn), [0x04, 0x08, 0x69, 0x02, 0xFF, 0xFF]);
  // Positive 3-byte form
  assertEquals(d(0x10000n), [0x04, 0x08, 0x69, 0x03, 0x00, 0x00, 0x01]);
  assertEquals(d(0xFFFFFFn), [0x04, 0x08, 0x69, 0x03, 0xFF, 0xFF, 0xFF]);
  // Positive 4-byte form
  assertEquals(d(0x1000000n), [0x04, 0x08, 0x69, 0x04, 0x00, 0x00, 0x00, 0x01]);
  assertEquals(d(0x3FFFFFFFn), [
    0x04,
    0x08,
    0x69,
    0x04,
    0xFF,
    0xFF,
    0xFF,
    0x3F,
  ]);
  // Negative 1-byte form
  assertEquals(d(-124n), [0x04, 0x08, 0x69, 0xFF, 0x84]);
  assertEquals(d(-256n), [0x04, 0x08, 0x69, 0xFF, 0x00]);
  // Negative 2-byte form
  assertEquals(d(-257n), [0x04, 0x08, 0x69, 0xFE, 0xFF, 0xFE]);
  assertEquals(d(-0x10000n), [0x04, 0x08, 0x69, 0xFE, 0x00, 0x00]);
  // Negative 3-byte form
  assertEquals(d(-0x10001n), [0x04, 0x08, 0x69, 0xFD, 0xFF, 0xFF, 0xFE]);
  assertEquals(d(-0x1000000n), [0x04, 0x08, 0x69, 0xFD, 0x00, 0x00, 0x00]);
  // Negative 4-byte form
  assertEquals(d(-0x1000001n), [
    0x04,
    0x08,
    0x69,
    0xFC,
    0xFF,
    0xFF,
    0xFF,
    0xFE,
  ]);
  assertEquals(d(-0x40000000n), [
    0x04,
    0x08,
    0x69,
    0xFC,
    0x00,
    0x00,
    0x00,
    0xC0,
  ]);
});
